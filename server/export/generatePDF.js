/**
 * PDF Export Generator
 * Generates beautiful PDF itineraries with all details
 */

const PDFDocument = require('pdfkit');

/**
 * Generate a comprehensive PDF itinerary
 */
async function generateItineraryPDF(itinerary, agentType = 'best-overall') {
  const doc = new PDFDocument({
    size: 'A4',
    margin: 50,
    bufferPages: true
  });

  // Color scheme based on agent type
  const colors = getAgentColors(agentType);

  // COVER PAGE
  doc.fontSize(40)
     .fillColor(colors.primary)
     .text('Your Road Trip', { align: 'center' });

  doc.moveDown(0.5);

  const routeName = itinerary.route_name || 'Custom Route';
  doc.fontSize(28)
     .fillColor('#000')
     .text(routeName, { align: 'center' });

  doc.moveDown(1);

  const totalDays = itinerary.day_structure?.days?.length || 0;
  doc.fontSize(16)
     .fillColor('#666')
     .text(`${totalDays}-Day ${capitalizeAgentType(agentType)} Journey`, { align: 'center' });

  if (itinerary.budget) {
    doc.moveDown(0.5);
    doc.fontSize(14)
       .fillColor('#666')
       .text(`Budget: $${itinerary.budget.total} total`, { align: 'center' });
  }

  doc.moveDown(2);
  doc.fontSize(10)
     .fillColor('#999')
     .text('Generated by RdTrip AI', { align: 'center' });

  // TABLE OF CONTENTS
  doc.addPage();
  doc.fontSize(24)
     .fillColor(colors.primary)
     .text('Your Itinerary at a Glance');

  doc.moveDown(1);

  if (itinerary.day_structure?.days) {
    itinerary.day_structure.days.forEach((day) => {
      doc.fontSize(12)
         .fillColor('#000')
         .text(`Day ${day.day}: `, { continued: true })
         .fillColor('#666')
         .text(day.location);
      doc.moveDown(0.3);
    });
  }

  // BUDGET SUMMARY PAGE
  if (itinerary.budget) {
    doc.addPage();
    doc.fontSize(24)
       .fillColor(colors.primary)
       .text('Budget Summary');

    doc.moveDown(1);

    doc.fontSize(16)
       .fillColor('#000')
       .text(`Total Cost: $${itinerary.budget.total}`);

    doc.fontSize(14)
       .fillColor('#666')
       .text(`Per Day: $${itinerary.budget.perDay}`);

    doc.text(`Per Person: $${itinerary.budget.perPerson}`);

    doc.moveDown(1);

    // Category breakdown
    doc.fontSize(14)
       .fillColor('#000')
       .text('Breakdown by Category:');

    doc.moveDown(0.5);

    const categories = [
      { name: 'Accommodation', amount: itinerary.budget.accommodation },
      { name: 'Meals', amount: itinerary.budget.meals },
      { name: 'Activities', amount: itinerary.budget.activities },
      { name: 'Transportation', amount: itinerary.budget.transportation }
    ];

    categories.forEach(cat => {
      const percentage = itinerary.budget.total > 0
        ? ((cat.amount / itinerary.budget.total) * 100).toFixed(1)
        : 0;

      doc.fontSize(12)
         .fillColor('#000')
         .text(`${cat.name}: `, { continued: true })
         .fillColor('#666')
         .text(`$${cat.amount} (${percentage}%)`);
      doc.moveDown(0.3);
    });
  }

  // DAILY PAGES
  if (itinerary.day_structure?.days) {
    itinerary.day_structure.days.forEach((day, dayIndex) => {
      doc.addPage();

      // Day header with colored bar
      doc.rect(50, 50, 495, 3).fill(colors.primary);
      doc.moveDown(0.5);

      doc.fontSize(28)
         .fillColor(colors.primary)
         .text(`Day ${day.day}`);

      doc.fontSize(14)
         .fillColor('#666')
         .text(new Date(day.date).toLocaleDateString('en-US', {
           weekday: 'long',
           year: 'numeric',
           month: 'long',
           day: 'numeric'
         }));

      doc.fontSize(16)
         .fillColor('#000')
         .text(day.location);

      doc.moveDown(1);

      // Weather
      if (itinerary.weather) {
        const weather = itinerary.weather.find(w => w.day === day.day);
        if (weather && weather.temp) {
          doc.fontSize(12)
             .fillColor('#666')
             .text(`Weather: ${weather.conditions} | ${weather.temp.high}°/${weather.temp.low}°`);
          doc.moveDown(0.5);
        }
      }

      // Drive segments with scenic stops
      if (day.driveSegments && day.driveSegments.length > 0) {
        doc.fontSize(14)
           .fillColor('#000')
           .text('Driving Today:');

        day.driveSegments.forEach(segment => {
          doc.fontSize(11)
             .fillColor('#666')
             .text(`  ${segment.from} → ${segment.to} (${segment.distance} km, ${segment.estimatedTime})`);

          // Scenic stops for this segment
          if (itinerary.scenic_stops) {
            const segmentStops = itinerary.scenic_stops.find(
              ss => ss.day === day.day && ss.segment === `${segment.from} → ${segment.to}`
            );

            if (segmentStops?.stops && segmentStops.stops.length > 0) {
              doc.fontSize(10)
                 .fillColor(colors.secondary)
                 .text('    Recommended stops:');

              segmentStops.stops.forEach(stop => {
                doc.fontSize(9)
                   .fillColor('#666')
                   .text(`      • ${stop.name} (${stop.duration})`);
              });
            }
          }
        });

        doc.moveDown(0.8);
      }

      // Activities
      if (itinerary.activities) {
        const dayActivities = itinerary.activities.filter(a => a.day === day.day);

        if (dayActivities.length > 0) {
          doc.fontSize(14)
             .fillColor('#000')
             .text('Activities:');

          dayActivities.forEach(activity => {
            doc.fontSize(12)
               .fillColor('#000')
               .text(`  ${activity.name}`, { continued: true });

            if (activity.timeSlot) {
              doc.fillColor('#999')
                 .text(` (${activity.timeSlot})`);
            } else {
              doc.text('');
            }

            doc.fontSize(10)
               .fillColor('#666')
               .text(`  ${activity.description}`, { width: 450 });

            if (activity.cost) {
              doc.fontSize(9)
                 .fillColor('#999')
                 .text(`  Cost: ${activity.cost}`);
            }

            doc.moveDown(0.5);
          });

          doc.moveDown(0.5);
        }
      }

      // Restaurants
      if (itinerary.restaurants) {
        const dayMeals = itinerary.restaurants.filter(r => r.day === day.day);

        if (dayMeals.length > 0) {
          doc.fontSize(14)
             .fillColor('#000')
             .text('Dining:');

          dayMeals.forEach(meal => {
            doc.fontSize(12)
               .fillColor('#000')
               .text(`  ${meal.mealType}: ${meal.name}`, { continued: true });

            if (meal.priceRange) {
              doc.fillColor('#999')
                 .text(` (${'$'.repeat(meal.priceRange)})`);
            } else {
              doc.text('');
            }

            doc.fontSize(10)
               .fillColor('#666')
               .text(`  ${meal.cuisine}`);

            if (meal.signature) {
              doc.fontSize(9)
                 .fillColor(colors.secondary)
                 .text(`  Must-try: ${meal.signature}`);
            }

            doc.moveDown(0.5);
          });

          doc.moveDown(0.5);
        }
      }

      // Local events
      if (itinerary.events) {
        const dayEvents = itinerary.events.filter(e => e.day === day.day);

        if (dayEvents.length > 0) {
          doc.fontSize(14)
             .fillColor('#000')
             .text('Local Events:');

          dayEvents.forEach(event => {
            doc.fontSize(11)
               .fillColor('#000')
               .text(`  ${event.name}`);

            doc.fontSize(9)
               .fillColor('#666')
               .text(`  ${event.description}`);

            doc.moveDown(0.3);
          });

          doc.moveDown(0.5);
        }
      }

      // Accommodation
      if (itinerary.accommodations) {
        const hotel = itinerary.accommodations.find(h => h.night === day.day);

        if (hotel) {
          doc.fontSize(14)
             .fillColor('#000')
             .text('Overnight Stay:');

          doc.fontSize(12)
             .fillColor('#000')
             .text(`  ${hotel.name}`, { continued: true });

          if (hotel.pricePerNight) {
            doc.fillColor('#999')
               .text(` - $${hotel.pricePerNight}/night`);
          } else {
            doc.text('');
          }

          if (hotel.location) {
            doc.fontSize(10)
               .fillColor('#666')
               .text(`  ${hotel.location}`);
          }

          if (hotel.whyRecommended) {
            doc.fontSize(9)
               .fillColor('#666')
               .text(`  ${hotel.whyRecommended}`, { width: 450 });
          }
        }
      }

      // Practical info
      if (itinerary.practical_info) {
        const cityInfo = itinerary.practical_info.find(p => p.city === day.overnight);

        if (cityInfo) {
          doc.moveDown(1);
          doc.fontSize(12)
             .fillColor(colors.primary)
             .text('Local Tips:');

          if (cityInfo.parking?.recommendation) {
            doc.fontSize(9)
               .fillColor('#666')
               .text(`  Parking: ${cityInfo.parking.recommendation}`);
          }

          if (cityInfo.transportation?.bestOption) {
            doc.fontSize(9)
               .fillColor('#666')
               .text(`  Getting around: ${cityInfo.transportation.bestOption}`);
          }

          if (cityInfo.localTips && cityInfo.localTips.length > 0) {
            cityInfo.localTips.slice(0, 2).forEach(tip => {
              doc.fontSize(9)
                 .fillColor('#666')
                 .text(`  • ${tip}`, { width: 450 });
            });
          }
        }
      }

      // Footer with page number
      doc.fontSize(8)
         .fillColor('#999')
         .text(`Page ${dayIndex + 3} | Day ${day.day} of ${totalDays}`,
               50,
               doc.page.height - 50,
               { align: 'center' });
    });
  }

  // FINAL PAGE - Notes
  doc.addPage();
  doc.fontSize(24)
     .fillColor(colors.primary)
     .text('Travel Notes');

  doc.moveDown(1);

  doc.fontSize(12)
     .fillColor('#666')
     .text('Use this space for your personal notes, bookings, or modifications:');

  doc.moveDown(2);

  // Draw lines for notes
  for (let i = 0; i < 15; i++) {
    const y = doc.y + (i * 30);
    doc.moveTo(50, y)
       .lineTo(545, y)
       .stroke('#ddd');
  }

  doc.end();
  return doc;
}

/**
 * Get agent-specific colors
 */
function getAgentColors(agentType) {
  const colors = {
    'best-overall': { primary: '#064d51', secondary: '#0a6b70' },
    'adventure': { primary: '#0f5132', secondary: '#198754' },
    'culture': { primary: '#d4a017', secondary: '#ffc107' },
    'food': { primary: '#8b0000', secondary: '#dc143c' },
    'hidden-gems': { primary: '#1e3a8a', secondary: '#3b82f6' }
  };

  return colors[agentType] || colors['best-overall'];
}

/**
 * Capitalize agent type for display
 */
function capitalizeAgentType(agentType) {
  const names = {
    'best-overall': 'Best Overall',
    'adventure': 'Adventure',
    'culture': 'Culture',
    'food': 'Food & Dining',
    'hidden-gems': 'Hidden Gems'
  };

  return names[agentType] || 'Custom';
}

module.exports = { generateItineraryPDF };
